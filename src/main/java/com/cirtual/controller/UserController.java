package com.cirtual.controller;

import com.cirtual.entity.User;
import com.cirtual.service.UserService;

import java.util.List;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

/**
 * The controller class for all the requests coming on /users/ path. The class
 * makes use of UserService by auto wiring it.
 * 
 * @author ashutosh
 *
 */
@RestController
@RequestMapping("/api/users")
public class UserController {

	private final Logger logger = LoggerFactory.getLogger(UserController.class);

	@Autowired
	private UserService userService;

	/**
	 * The getUserDetails method takes user id as input via a GET request and
	 * return the User information as the response.
	 * 
	 * @param User
	 *            id for which details are required.
	 * @return The User details generated by the toString() method of the User
	 *         class.
	 */
	@RequestMapping(value = "{id}", method = RequestMethod.GET)
	public String getUserDetails(@PathVariable Integer id) {
		logger.info("Executing userService.findById");
		if (userService.exists(id)) {
			return userService.findById(id).toString();
		}
		return "The user id does not exists.";
	}

	/**
	 * The POST method registers a new User and persists it in the data store.
	 * The @RequestBody contains field values of the User class which is
	 * validated. A pre-check is done to see if the User is already registered.
	 * User email which need to be unique among the users is used for this
	 * check.
	 * 
	 * @param user
	 *            class member data which needs to be used for the User object
	 *            population.
	 * @param bindingResult
	 *            generated after validation of the user input.
	 * @return message about success/failure of the method run.
	 */
	@RequestMapping(value = "/register", method = RequestMethod.POST)
	public String createNewUser(@RequestBody @Valid User user, BindingResult bindingResult) {
		logger.info("Executing userService.saveUser");
		User userExists = userService.findUserByEmail(user.getEmail());
		if (userExists != null) {
			return "There is already a user registered with the email provided";
		}
		if (bindingResult.hasErrors()) {
			return getBindingErrors(bindingResult);
		} else {
			userService.saveUser(user);
			return ("User registered! The new user id is: " + user.getId());
		}
	}

	/**
	 * Only authorized Users are allowed to edit their own profile. A User can
	 * only update few of the details after registration: firstName and
	 * lastName. Other details cannot be modified once created. Authentication
	 * is done to make sure that the request sender is same user as the profile
	 * under update.
	 * 
	 * @param id
	 *            of the user which needs to be updated
	 * @param user:
	 *            new user details which will update the existing details.
	 * @param bindingResult
	 *            generated after validation of the user input.
	 * @return The success/failure message after trying to update the user.
	 */
	@RequestMapping(value = "/editProfile/{id}", method = RequestMethod.PUT)
	public String editUser(@PathVariable Integer id, @RequestBody @Valid User user, BindingResult bindingResult) {
		logger.info("Executing userService.updateUser");
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

		if (userService.validateUser(authentication, id)) {
			userService.updateUser(id, user);
			return "User updated successfully";
		}
		return "Only profile owner can edit his/her own profile";
	}

	/**
	 * The getUsers method is can be used to fetch details of all the Users.
	 * 
	 * @return list of all the users saved in the data store.
	 */
	@RequestMapping(value = "/getUsers", method = RequestMethod.GET)
	public List<User> getUsersList() {
		logger.info("Executing userService.getAllUsers");
		return userService.getAllUsers();
	}

	/**
	 * The method stringify the binding result errors if any and return it.
	 * 
	 * @param bindingResult
	 *            generated after validation of the user input
	 * @return String containing all the binding result errors.
	 */
	private String getBindingErrors(BindingResult bindingResult) {
		logger.info("Checking BindingResult errors.");
		List<FieldError> errors = bindingResult.getFieldErrors();
		StringBuilder sb = new StringBuilder();
		for (FieldError error : errors) {
			sb.append(error.getObjectName()).append(error.getDefaultMessage());
		}
		return sb.toString();
	}
}
